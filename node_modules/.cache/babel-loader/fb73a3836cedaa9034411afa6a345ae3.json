{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\thread-loader\\dist\\cjs.js!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js!D:\\办公\\projectwc\\前端\\ManageSys\\src\\store\\modules\\permission.js","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\store\\modules\\permission.js","mtime":1576638136533},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"D:\\\\\\u529E\\u516C\\\\projectwc\\\\\\u524D\\u7AEF\\\\ManageSys\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { constantRoutes } from '@/router';\nimport Layout from '@/layout';\n/**\n * Use meta.role to determine if the current user has permission\n * @param roles\n * @param route\n */\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n}\n/**\n * Filter asynchronous routing tables by recursion\n * @param routes asyncRoutes\n * @param roles\n */\n\n\nexport function filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = _objectSpread({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\n/**\n *\n * @param  {Array} userRouter 后台返回的用户权限json\n * @param  {Array} role  角色\n * @return {Object} btn 按钮权限 routes 过滤后的路由r\n */\n\nexport function recursionRouter(userRouter, role, cpid) {\n  var realRoutes = [];\n  var buttons = [];\n  var addAuthPage = false;\n\n  for (var u = 0; u < userRouter.length; u++) {\n    var menuIndex = '0';\n    var menu = userRouter[u];\n\n    switch (menu.name) {\n      case '首页':\n        menuIndex = '1';\n        break;\n\n      case '数据中心':\n        menuIndex = '2';\n        break;\n\n      case '系统管理':\n        menuIndex = '3';\n        break;\n\n      case '系统设置':\n        menuIndex = '4';\n        break;\n\n      default:\n        break;\n    }\n\n    if (menu.children) {\n      for (var m = 0; m < menu.children.length; m++) {\n        var second = menu.children[m];\n\n        if (second.uncheckedIcon === 'structure') {\n          if (!addAuthPage) {\n            var authMenu;\n\n            (function () {\n              var authUrl = cpid === 12 ? 'galasys' : 'index';\n              authMenu = {\n                path: '/structure',\n                component: Layout,\n                MenuIndex: menuIndex,\n                meta: {\n                  roles: role,\n                  icon: second.uncheckedIcon\n                },\n                children: [{\n                  path: 'index',\n                  component: function component() {\n                    return import(\"@/views/structure/\".concat(authUrl));\n                  },\n                  name: 'structure',\n                  meta: {\n                    title: '组织架构',\n                    noCache: true,\n                    meta: {\n                      roles: role,\n                      index: menuIndex\n                    }\n                  }\n                }]\n              };\n              addAuthPage = true;\n              realRoutes.push(authMenu);\n            })();\n          }\n        } else {\n          var secondMenu = {\n            path: '',\n            component: Layout,\n            MenuIndex: menuIndex,\n            meta: {\n              roles: role,\n              icon: second.uncheckedIcon\n            },\n            children: []\n          };\n\n          if (second.children !== null && second.children[0].funcType !== 3) {\n            second.children.forEach(function (item) {\n              var child = item.funcElementIdentifier.split('/');\n              var pathUrl = item.funcElementIdentifier;\n              secondMenu.children.push({\n                path: child[1],\n                component: function component() {\n                  return import(\"@/views/\".concat(pathUrl));\n                },\n                // 参数要使用常量，不然会被覆盖！！！！！！！！！！！！！\n                name: child[0] + child[1],\n                meta: {\n                  title: item.name,\n                  noCache: true,\n                  meta: {\n                    roles: role,\n                    index: menuIndex\n                  }\n                }\n              });\n\n              if (item.children !== null) {\n                item.children.forEach(function (btn) {\n                  buttons.push(btn.name);\n                });\n              }\n            });\n\n            if (second.name === '人脸识别') {\n              secondMenu.children.push({\n                path: 'zjry',\n                component: function component() {\n                  return import('@/views/face/zjry');\n                },\n                hidden: true,\n                meta: {\n                  title: '白名单管理 / 增加人员',\n                  activeMenu: '/zjry',\n                  affix: true,\n                  meta: {\n                    roles: role,\n                    index: menuIndex\n                  }\n                }\n              });\n              secondMenu.children.push({\n                path: 'hadd',\n                component: function component() {\n                  return import('@/views/face/hadd');\n                },\n                hidden: true,\n                meta: {\n                  title: '黑名单管理 / 增加人员',\n                  activeMenu: '/face',\n                  affix: true,\n                  meta: {\n                    roles: role,\n                    index: menuIndex\n                  }\n                }\n              });\n            }\n\n            secondMenu.meta.title = second.name;\n            secondMenu.redirect = '/' + second.children[0].funcElementIdentifier;\n            secondMenu.path = '/' + second.children[0].funcElementIdentifier.split('/')[0];\n          } else {\n            var path;\n\n            (function () {\n              path = second.funcElementIdentifier.split('/');\n              var url = second.funcElementIdentifier;\n              secondMenu.children = [{\n                path: path[1],\n                component: function component() {\n                  return import(\"@/views/\".concat(url));\n                },\n                // 参数要使用常量，不然会被覆盖！！！！！！！！！！！！！\n                name: path[0],\n                meta: {\n                  title: second.name,\n                  noCache: true,\n                  meta: {\n                    roles: role,\n                    index: menuIndex\n                  }\n                }\n              }];\n              secondMenu.path = '/' + path[0];\n\n              if (second.children !== null) {\n                second.children.forEach(function (btn) {\n                  buttons.push(btn.name);\n                });\n              }\n            })();\n          }\n\n          realRoutes.push(secondMenu);\n        }\n      }\n    }\n  }\n\n  return {\n    btn: buttons,\n    routes: realRoutes\n  };\n}\nvar state = {\n  routes: [],\n  addRoutes: [],\n  buttons: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, routes) {\n    state.addRoutes = routes;\n    state.routes = constantRoutes.concat(routes);\n  },\n  SET_BUTTONS: function SET_BUTTONS(state, buttons) {\n    state.buttons = buttons;\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, _ref2) {\n    var commit = _ref.commit;\n    var roles = _ref2.roles,\n        func = _ref2.func,\n        cpid = _ref2.cpid;\n    return new Promise(function (resolve) {\n      var accessedRoutes = [];\n\n      if (func.length > 0) {\n        var all = recursionRouter(func[0].children, roles, cpid);\n        accessedRoutes = all.routes;\n        commit('SET_BUTTONS', all.btn);\n      }\n\n      accessedRoutes.push({\n        // 数据中心默认页\n        path: '/baogao',\n        component: Layout,\n        hidden: true,\n        MenuIndex: '2',\n        meta: {\n          roles: roles\n        },\n        children: [{\n          path: 'index',\n          component: function component() {\n            return import('@/views/baogao/index');\n          },\n          name: 'baogao',\n          meta: {\n            title: '',\n            noCache: true,\n            meta: {\n              roles: roles,\n              index: '2'\n            }\n          }\n        }]\n      });\n      accessedRoutes.push({\n        path: '*',\n        redirect: '/404',\n        hidden: true\n      });\n      commit('SET_ROUTES', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}