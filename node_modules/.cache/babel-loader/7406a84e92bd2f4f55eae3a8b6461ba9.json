{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\办公\\projectwc\\前端\\ManageSys\\src\\utils\\request.js","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\utils\\request.js","mtime":1576638137724},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u529E\\u516C\\\\projectwc\\\\\\u524D\\u7AEF\\\\ManageSys\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 10000 // request timeout\n\n});\n\nservice.defaults.withCredentials = true; // 让ajax携带cookie\n// request interceptor\n// service.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (_store.default.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['Galasys-Token'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var res = response.data;\n  var errorMsg = res.msg;\n  console.log(res);\n  var code;\n\n  if (errorMsg === '未登陆!') {\n    code = 400;\n  } else if (errorMsg === 'Bad credentials') {\n    code = 501;\n  } else {\n    code = res.status || parseInt(res.code);\n  } // if the custom code is not 20000, it is judged as an error.\n\n\n  if (code >= 400) {\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    if (code === 400 || code === 401 || code === 488) {\n      // to re-login\n      _elementUi.MessageBox.confirm('登录超时，请重新登录', '提示', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _store.default.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    } else if (code === 501) {\n      (0, _elementUi.Message)({\n        message: '用户名或密码错误',\n        type: 'error',\n        duration: 3 * 1000\n      });\n    } else if (code === 10001) {\n      (0, _elementUi.Message)({\n        message: errorMsg,\n        type: 'error',\n        duration: 3 * 1000\n      });\n    }\n\n    return Promise.reject(new Error(errorMsg || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: '服务器链接失败，请检查网络环境',\n    // error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}