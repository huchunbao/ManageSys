{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\thread-loader\\dist\\cjs.js!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js!D:\\办公\\projectwc\\前端\\ManageSys\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\store\\modules\\user.js","mtime":1576638136556},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\\\u529E\\u516C\\\\projectwc\\\\\\u524D\\u7AEF\\\\ManageSys\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport { login as _login, logout as _logout, getInfo as _getInfo, updateAvatar as _updateAvatar, updateMobile as _updateMobile } from '@/api/user';\nimport { getToken, setToken, removeToken } from '@/utils/auth';\nimport router, { resetRouter } from '@/router';\nvar state = {\n  token: getToken(),\n  name: '',\n  avatar: '',\n  uid: '',\n  ucode: '',\n  mobile: '',\n  post: '',\n  section: '',\n  companyId: 0,\n  // 身份标识\n  company: '',\n  roles: []\n};\nvar mutations = {\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_INFO: function SET_INFO(state, user) {\n    state.name = user.cusName;\n    state.avatar = process.env.VUE_APP_BASE_API + '/user/img/' + user.cusPic + '?t=' + new Date().getTime();\n    state.uid = user.userId;\n    state.ucode = user.userCode;\n    state.mobile = user.phone;\n    state.post = user.postName;\n    state.section = user.dept.name;\n    state.companyId = user.company.companyId;\n    state.company = user.company.companyName;\n  },\n  RESET_INFO: function RESET_INFO(state) {\n    state.name = '';\n    state.avatar = '';\n    state.uid = '';\n    state.ucode = '';\n    state.mobile = '';\n    state.post = '';\n    state.section = '';\n    state.companyId = 0;\n    state.company = '';\n  },\n  SET_ROLES: function SET_ROLES(state, roles) {\n    state.roles = roles;\n  },\n  SET_AVATAR: function SET_AVATAR(state, avatar) {\n    state.avatar = avatar;\n  },\n  SET_MOBILE: function SET_MOBILE(state, mobile) {\n    state.mobile = mobile;\n  }\n};\nvar actions = {\n  // user login\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var username = userInfo.username,\n        password = userInfo.password;\n    return new Promise(function (resolve, reject) {\n      _login({\n        username: username.trim(),\n        password: password\n      }).then(function (response) {\n        var data = response;\n        commit('SET_TOKEN', data.token);\n        setToken(data.token);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // get user info\n  getInfo: function getInfo(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      _getInfo(state.token).then(function (response) {\n        var data = response.data;\n\n        if (!data || data === undefined) {\n          reject('验证失败，请重新登录');\n        }\n        /* const { roles, name, avatar, introduction } = data\n         // roles must be a non-empty array\n        if (!roles || roles.length <= 0) {\n          reject('验证失败，请重新登录')\n        } */\n\n\n        var authorities = data.authorities;\n\n        if (!authorities || authorities.length <= 0) {\n          reject('获取用户权限失败');\n        }\n\n        var roles = [];\n        var func = data.funcTree;\n        var cpid = data.cpid;\n        authorities.forEach(function (role) {\n          roles.push(role.authority);\n        });\n        commit('SET_ROLES', roles); // 设置用户信息\n\n        commit('SET_INFO', data);\n        resolve({\n          roles: roles,\n          func: func,\n          cpid: cpid\n        });\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // user logout\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    return new Promise(function (resolve, reject) {\n      _logout(state.token).then(function () {\n        commit('SET_TOKEN', '');\n        commit('SET_ROLES', []);\n        commit('RESET_INFO');\n        removeToken();\n        resetRouter();\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // remove token\n  resetToken: function resetToken(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      commit('SET_ROLES', []);\n      commit('RESET_INFO');\n      removeToken();\n      resolve();\n    });\n  },\n  // dynamically modify permissions\n  changeRoles: function changeRoles(_ref5, role) {\n    var commit = _ref5.commit,\n        dispatch = _ref5.dispatch;\n    return new Promise(\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(resolve) {\n        var token, _ref7, roles, accessRoutes;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                token = role + '-token';\n                commit('SET_TOKEN', token);\n                setToken(token);\n                _context.next = 5;\n                return dispatch('getInfo');\n\n              case 5:\n                _ref7 = _context.sent;\n                roles = _ref7.roles;\n                resetRouter(); // generate accessible routes map based on roles\n\n                _context.next = 10;\n                return dispatch('permission/generateRoutes', roles, {\n                  root: true\n                });\n\n              case 10:\n                accessRoutes = _context.sent;\n                // dynamically add accessible routes\n                router.addRoutes(accessRoutes); // reset visited views and cached views\n\n                dispatch('tagsView/delAllViews', null, {\n                  root: true\n                });\n                resolve();\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  },\n  updateAvatar: function updateAvatar(_ref8, avatarInfo) {\n    var commit = _ref8.commit,\n        state = _ref8.state;\n    // 修改头像\n    return new Promise(function (resolve, reject) {\n      _updateAvatar(avatarInfo.uid, avatarInfo.formData).then(function (response) {\n        if (response.status === 1) {\n          reject('上传失败，请稍后重试');\n        }\n\n        var avatar = state.avatar.substring(0, state.avatar.indexOf('?')) + '?t=' + new Date().getTime();\n        commit('SET_AVATAR', avatar);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  updateMobile: function updateMobile(_ref9, mobileInfo) {\n    var commit = _ref9.commit,\n        state = _ref9.state;\n    // 修改手机号\n    return new Promise(function (resolve, reject) {\n      _updateMobile(mobileInfo.uid, mobileInfo.mobile).then(function (response) {\n        if (response.status === 1) {\n          reject('修改失败，请稍后重试');\n        }\n\n        commit('SET_MOBILE', mobileInfo.mobile.phone);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}