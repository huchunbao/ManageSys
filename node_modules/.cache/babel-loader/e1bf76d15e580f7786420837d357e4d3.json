{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\ChartDoubleClomn.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\ChartDoubleClomn.vue","mtime":1576638136682},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u529E\\u516C\\\\projectwc\\\\\\u524D\\u7AEF\\\\ManageSys\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _echarts = _interopRequireDefault(require(\"echarts\"));\n\n//\n//\n//\n//\n// import resize from './mixins/resize'\nvar _default2 = {\n  // mixins: [resize],\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    getdata: {\n      type: Object,\n      default: function _default() {\n        return {\n          id: 'echar',\n          height: '100%',\n          width: '100%',\n          legend: [],\n          datay1: [],\n          datay2: [],\n          datax: []\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      chart: null,\n      colorlist: ['#89A2FF', '#A2BCFF', '#FF9F9C', '#FFDC79'] // 扇形区域以及列表颜色\n\n    };\n  },\n  watch: {\n    getdata: {\n      // immediate: true,\n      handler: function handler(val) {\n        var _this = this;\n\n        this.$nextTick(function () {\n          // this.LineClomn(val)\n          _this.LineClomn(val);\n        });\n      },\n      deep: true\n    }\n  },\n  mounted: function mounted() {\n    this.chart = _echarts.default.init(document.getElementById(this.getdata.id));\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (!this.chart) {\n      return;\n    }\n\n    this.chart.dispose();\n    this.chart = null;\n  },\n  methods: {\n    LineClomn: function LineClomn() {\n      var that = this;\n      var legend = ['离线', '在线'];\n      var datax = ['视频监控', '网络', '水质监控', '大屏', '服务器'];\n      var datay2 = [23.2, 25.6, 76.7, 135.6, 33];\n      var datay1 = [26.4, 70.7, 175.6, 28.2, 55];\n      var option = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            // 坐标轴指示器，坐标轴触发有效\n            type: 'cross' // 默认为直线，可选为：'line' | 'shadow' | cross\n\n          }\n        },\n        legend: {\n          top: 20,\n          textStyle: {\n            // fontSize: 18,// 字体大小\n            color: '#16C7FB' // 字体颜色\n\n          },\n          data: legend\n        },\n        color: ['#F94B2F', '#02F9AB'],\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        yAxis: {\n          type: 'value',\n          axisTick: {\n            // 刻度\n            show: false\n          },\n          splitLine: {\n            // 网格线\n            show: false\n          },\n          axisLine: {\n            // 轴线style\n            lineStyle: {\n              color: '#16C7FB'\n            }\n          },\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: {\n              color: '#fff'\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          nameTextStyle: {\n            // 轴名称样式\n            color: '#16C7FB'\n          },\n          axisLine: {\n            // 轴线style\n            lineStyle: {\n              color: '#16C7FB'\n            }\n          },\n          axisTick: {\n            // 刻度\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            formatter: function formatter(params) {\n              var newParamsName = ''; // 最终拼接成的字符串\n\n              var paramsNameNumber = params.length; // 实际标签的个数\n\n              var provideNumber = 1; // 每行能显示的字的个数\n\n              var rowNumber = Math.ceil(paramsNameNumber / provideNumber); // 换行的话，需要显示几行，向上取整\n\n              /**\r\n              * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签\r\n              */\n              // 条件等同于rowNumber>1\n\n              if (paramsNameNumber > provideNumber) {\n                /** 循环每一行,p表示行 */\n                for (var p = 0; p < rowNumber; p++) {\n                  var tempStr = ''; // 表示每一次截取的字符串\n\n                  var start = p * provideNumber; // 开始截取的位置\n\n                  var end = start + provideNumber; // 结束截取的位置\n                  // 此处特殊处理最后一行的索引值\n\n                  if (p === rowNumber - 1) {\n                    // 最后一次不换行\n                    tempStr = params.substring(start, paramsNameNumber);\n                  } else {\n                    // 每一次拼接字符串并换行\n                    tempStr = params.substring(start, end) + '\\n';\n                  }\n\n                  newParamsName += tempStr; // 最终拼成的字符串\n                }\n              } else {\n                // 将旧标签的值赋给新标签\n                newParamsName = params;\n              } // 将最终的字符串返回\n\n\n              return newParamsName;\n            },\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          // axisLabel: {\n          //   interval: 0,\n          //   rotate: 40\n          // },\n          data: datax\n        },\n        series: [{\n          name: '离线',\n          barWidth: 20,\n          // 柱图宽度\n          type: 'bar',\n          stack: '总量',\n          data: datay1\n        }, {\n          name: '在线',\n          type: 'bar',\n          barWidth: 20,\n          // 柱图宽度\n          stack: '总量',\n          data: datay2\n        }]\n      };\n      that.chart.setOption(option);\n      window.addEventListener('resize', function () {\n        that.chart.resize();\n      });\n    }\n  }\n};\nexports.default = _default2;",null]}