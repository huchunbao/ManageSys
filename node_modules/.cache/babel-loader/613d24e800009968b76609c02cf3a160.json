{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\car\\cartrack.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\car\\cartrack.vue","mtime":1577252313340},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\\\u529E\\u516C\\\\projectwc\\\\\\u524D\\u7AEF\\\\ManageSys\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _car = require(\"@/api/car\");\n\nvar _CarSearch = _interopRequireDefault(require(\"./components/CarSearch\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _vueAmap = require(\"vue-amap\");\n\nvar _trackCar = _interopRequireDefault(require(\"@/assets/images/trackCar.png\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar amapManager = new _vueAmap.AMapManager();\nvar _default = {\n  name: 'CarTrack',\n  components: {\n    CarSearch: _CarSearch.default,\n    Pagination: _Pagination.default\n  },\n  data: function data() {\n    return {\n      nameList: [],\n      trackBtn: '轨迹回放',\n      datalist: [],\n      headlist: [{\n        label: '车船牌号',\n        prop: 'vehCode',\n        width: 'auto'\n      }, {\n        label: '速度',\n        prop: 'speed',\n        width: 'auto'\n      }, {\n        label: '方向',\n        prop: 'direction',\n        width: 'auto'\n      }, {\n        label: '经度',\n        prop: 'lng',\n        width: 'auto'\n      }, {\n        label: '纬度',\n        prop: 'lat',\n        width: 'auto'\n      }, {\n        label: '地址',\n        prop: 'address',\n        width: 'auto'\n      }, {\n        label: '定位时间',\n        prop: 'fixTime',\n        width: 'auto'\n      }],\n      total: 1,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 5\n      },\n      zoom: 15,\n      center: [116.336496, 39.942178],\n      amapManager: amapManager,\n      pathSimplifierIns: null,\n      trackCar: _trackCar.default,\n      // 轨迹回放图片\n      navg: null,\n      trackPath: []\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.getTabList('/boatsInfo/cardList', {}).then(function (data) {\n      // 车船列表\n      _this.nameList = data.data;\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (!this.navg) {\n      return;\n    }\n\n    this.navg.destroy();\n    this.navg = null;\n  },\n  mounted: function mounted() {// this.$nextTick(() => { leaflet 地图\n    //   this.initMap()\n    // })\n  },\n  methods: {\n    /*  initMap() {\n      var that = this\n      const map = L.map('trackMap', {\n        center: [that.center[1], that.center[0]],\n        zoom: that.zoom\n      })\n      const layer = new L.TileLayer('https://webrd0{s}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang=zh_cn&size=1&scale=1&style=8', {\n        subdomains: '1234'\n      })\n      map.addLayer(layer)\n      const carIcon = L.icon({\n        iconUrl: TrackCar,\n        iconSize: [24, 48]\n      })\n      L.motion.polyline([\n        [39.942178, 116.336496],\n        [39.943188, 116.337596],\n        [39.944198, 116.338696],\n        [39.945208, 116.339796],\n        [39.946228, 116.340896]\n      ], {\n        color: 'red'\n      }, {\n        auto: true,\n        duration: 5000,\n        easing: L.Motion.Ease.easeInOutQuart\n      }, {\n        removeOnEnd: false,\n        icon: carIcon\n      }).addTo(map)\n    }, */\n    getTabList: function getTabList(url, query) {\n      return new Promise(function (resolve, reject) {\n        (0, _car.getList)(url, query).then(function (response) {\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    search: function search(query) {\n      if (query[1].vehCode === '') {\n        return;\n      }\n\n      this.listLoading = true;\n      this.searchData(query[1]);\n      this.trackBtn = '轨迹回放';\n\n      if (!this.navg) {\n        return;\n      }\n\n      this.pathSimplifierIns.setData([]);\n      this.navg.destroy();\n      this.navg = null;\n    },\n    searchData: function searchData(query) {\n      var _this2 = this;\n\n      // 查询\n      this.getTabList('/history/loadHistory', query).then(function (data) {\n        _this2.$refs.tracksearch.searchLoading = false;\n        _this2.listLoading = false;\n        _this2.total = data.data.pageList.totalElements;\n        _this2.datalist = data.data.pageList.content;\n        _this2.trackPath = [];\n        data.data.addressMap.forEach(function (item) {\n          _this2.trackPath.push([item.lng, item.lat]);\n        });\n      });\n    },\n    btnTrack: function btnTrack() {\n      // 轨迹回放\n      var dataCount = this.datalist.length;\n\n      if (dataCount === 0) {\n        this.$message({\n          message: '暂无数据',\n          type: 'warning',\n          duration: 3000\n        });\n        return;\n      } else if (dataCount === 1) {\n        this.$message({\n          message: '当前只有一条记录，无法回放',\n          type: 'warning',\n          duration: 3000\n        });\n        return;\n      }\n\n      var that = this;\n\n      if (that.navg === null) {\n        that.initStarck();\n        that.trackBtn = '停止回放';\n      } else {\n        if (that.trackBtn === '轨迹回放') {\n          that.navg.resume();\n          that.trackBtn = '停止回放';\n        } else {\n          that.navg.pause();\n          that.trackBtn = '轨迹回放';\n        }\n      }\n    },\n    pageChange: function pageChange(page) {\n      var query = this.$refs.tracksearch.queryData;\n      query.pageNum = page[0].page;\n      this.searchData(query);\n    },\n    initStarck: function initStarck() {\n      var that = this;\n      AMapUI.load(['ui/misc/PathSimplifier', 'lib/$'], function (PathSimplifier, $) {\n        if (!PathSimplifier.supportCanvas) {\n          this.$message({\n            message: '当前游览器不支持轨迹回放',\n            type: 'error',\n            duration: 3000\n          });\n          return;\n        }\n\n        that.pathSimplifierIns = new PathSimplifier({\n          zIndex: 100,\n          // autoSetFitView:false,\n          map: amapManager.getMap(),\n          // 所属的地图实例\n          getPath: function getPath(pathData, pathIndex) {\n            return pathData.path;\n          },\n          getHoverTitle: function getHoverTitle(pathData, pathIndex, pointIndex) {\n            if (pointIndex >= 0) {\n              return pathData.name + '，点：' + pointIndex + '/' + pathData.path.length;\n            }\n\n            return pathData.name + '，点数量' + pathData.path.length;\n          },\n          renderOptions: {\n            renderAllPointsIfNumberBelow: 100 // 绘制路线节点，如不需要可设置为-1\n\n          }\n        }); // 设置数据\n\n        that.pathSimplifierIns.setData([{\n          name: '路线一',\n          path: that.trackPath\n        }]); // 对第一条线路（即索引 0）创建一个巡航器\n\n        that.navg = that.pathSimplifierIns.createPathNavigator(0, {\n          loop: true,\n          // 循环播放\n          speed: 200,\n          // 巡航速度，单位千米/小时\n          pathNavigatorStyle: {\n            width: 16,\n            height: 32,\n            content: PathSimplifier.Render.Canvas.getImageContent(that.trackCar, onload, onerror)\n          }\n        });\n        that.navg.start();\n      });\n    },\n    indexMethod: function indexMethod(index) {\n      // 格式化序号\n      return index + (this.listQuery.page - 1) * this.listQuery.limit + 1;\n    }\n  }\n};\nexports.default = _default;",null]}