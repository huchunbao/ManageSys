{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\car\\cartrack.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\car\\cartrack.vue","mtime":1576811950062},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getList } from '@/api/car'\nimport CarSearch from './components/CarSearch'\nimport Pagination from '@/components/Pagination'\nimport { AMapManager } from 'vue-amap'\nimport TrackCar from '@/assets/images/trackCar.png'\n\nvar amapManager = new AMapManager()\nexport default {\n  name: 'CarTrack',\n  components: { CarSearch, Pagination },\n  data() {\n    return {\n      nameList: [],\n      trackBtn: '轨迹回放',\n      datalist: [],\n      headlist: [\n        { label: '车船牌号', prop: 'vehCode', width: 'auto' },\n        { label: '速度', prop: 'speed', width: 'auto' },\n        { label: '方向', prop: 'direction', width: 'auto' },\n        { label: '经度', prop: 'lng', width: 'auto' },\n        { label: '纬度', prop: 'lat', width: 'auto' },\n        { label: '地址', prop: 'address', width: 'auto' },\n        { label: '定位时间', prop: 'fixTime', width: 'auto' }\n      ],\n      total: 1,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 5\n      },\n      zoom: 15,\n      center: [116.336496, 39.942178],\n      amapManager,\n      pathSimplifierIns: null,\n      trackCar: TrackCar,\n      navg: null,\n      trackPath: []\n    }\n  },\n  created() {\n    this.getTabList('/boatsInfo/cardList', {}).then(data => {\n      this.nameList = data.data\n    })\n  },\n  beforeDestroy() {\n    if (!this.navg) {\n      return\n    }\n    this.navg.destroy()\n    this.navg = null\n  },\n  mounted() {\n    // this.$nextTick(() => { leaflet 地图\n    //   this.initMap()\n    // })\n  },\n  methods: {\n    /*  initMap() {\n      var that = this\n      const map = L.map('trackMap', {\n        center: [that.center[1], that.center[0]],\n        zoom: that.zoom\n      })\n      const layer = new L.TileLayer('https://webrd0{s}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang=zh_cn&size=1&scale=1&style=8', {\n        subdomains: '1234'\n      })\n      map.addLayer(layer)\n      const carIcon = L.icon({\n        iconUrl: TrackCar,\n        iconSize: [24, 48]\n      })\n      L.motion.polyline([\n        [39.942178, 116.336496],\n        [39.943188, 116.337596],\n        [39.944198, 116.338696],\n        [39.945208, 116.339796],\n        [39.946228, 116.340896]\n      ], {\n        color: 'red'\n      }, {\n        auto: true,\n        duration: 5000,\n        easing: L.Motion.Ease.easeInOutQuart\n      }, {\n        removeOnEnd: false,\n        icon: carIcon\n      }).addTo(map)\n    }, */\n    getTabList(url, query) {\n      return new Promise((resolve, reject) => {\n        getList(url, query).then(response => {\n          resolve(response)\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    search(query) {\n      if (query[1].vehCode === '') {\n        return\n      }\n      this.listLoading = true\n      this.searchData(query[1])\n      this.trackBtn = '轨迹回放'\n      if (!this.navg) {\n        return\n      }\n      this.pathSimplifierIns.setData([])\n      this.navg.destroy()\n      this.navg = null\n    },\n    searchData(query) {\n      this.getTabList('/history/loadHistory', query).then(data => {\n        this.$refs.tracksearch.searchLoading = false\n        this.listLoading = false\n        this.total = data.data.pageList.totalElements\n        this.datalist = data.data.pageList.content\n        this.trackPath = []\n        data.data.addressMap.forEach(item => {\n          this.trackPath.push([item.lng, item.lat])\n        })\n      })\n    },\n    btnTrack() {\n      var dataCount = this.datalist.length\n      if (dataCount === 0) {\n        this.$message({\n          message: '暂无数据',\n          type: 'warning',\n          duration: 3000\n        })\n        return\n      } else if (dataCount === 1) {\n        this.$message({\n          message: '当前只有一条记录，无法回放',\n          type: 'warning',\n          duration: 3000\n        })\n        return\n      }\n      var that = this\n      if (that.navg === null) {\n        that.initStarck()\n        that.trackBtn = '停止回放'\n      } else {\n        if (that.trackBtn === '轨迹回放') {\n          that.navg.resume()\n          that.trackBtn = '停止回放'\n        } else {\n          that.navg.pause()\n          that.trackBtn = '轨迹回放'\n        }\n      }\n    },\n    pageChange(page) {\n      const query = this.$refs.tracksearch.queryData\n      query.pageNum = page[0].page\n      this.searchData(query)\n    },\n    initStarck() {\n      var that = this\n      AMapUI.load(['ui/misc/PathSimplifier', 'lib/$'], function(PathSimplifier, $) {\n        if (!PathSimplifier.supportCanvas) {\n          this.$message({\n            message: '当前游览器不支持轨迹回放',\n            type: 'error',\n            duration: 3000\n          })\n          return\n        }\n\n        that.pathSimplifierIns = new PathSimplifier({\n          zIndex: 100,\n          // autoSetFitView:false,\n          map: amapManager.getMap(), // 所属的地图实例\n          getPath: function(pathData, pathIndex) {\n            return pathData.path\n          },\n          getHoverTitle: function(pathData, pathIndex, pointIndex) {\n            if (pointIndex >= 0) {\n              return pathData.name + '，点：' + pointIndex + '/' + pathData.path.length\n            }\n            return pathData.name + '，点数量' + pathData.path.length\n          },\n          renderOptions: {\n            renderAllPointsIfNumberBelow: 100 // 绘制路线节点，如不需要可设置为-1\n          }\n        })\n\n        // 设置数据\n        that.pathSimplifierIns.setData([{\n          name: '路线一',\n          path: that.trackPath\n        }])\n\n        // 对第一条线路（即索引 0）创建一个巡航器\n        that.navg = that.pathSimplifierIns.createPathNavigator(0, {\n          loop: true, // 循环播放\n          speed: 200, // 巡航速度，单位千米/小时\n          pathNavigatorStyle: {\n            width: 16,\n            height: 32,\n            content: PathSimplifier.Render.Canvas.getImageContent(that.trackCar, onload, onerror)\n          }\n        })\n        that.navg.start()\n      })\n    },\n    indexMethod(index) {\n      return index + (this.listQuery.page - 1) * this.listQuery.limit + 1\n    }\n  }\n}\n",null]}