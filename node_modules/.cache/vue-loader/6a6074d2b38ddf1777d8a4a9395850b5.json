{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\EcharClomnThtee.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\EcharClomnThtee.vue","mtime":1576638136685},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport echarts from 'echarts'\r\n// import resize from './mixins/resize'\r\nexport default {\r\n  // mixins: [resize],\r\n  props: {\r\n    className: {\r\n      type: String,\r\n      default: 'chart'\r\n    },\r\n    getdata: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          id: 'echar', // *\r\n          height: '100%', // *\r\n          width: '100%', // *\r\n          grid: '', // 非必传\r\n          legend: [], // *\r\n          series_data: [], // *\r\n          datax: [], // *\r\n          color: [], // *\r\n          row_nums: 2, // x轴每行几个字\r\n          x_name: '',\r\n          y_name: '分布',\r\n          y_fomatter: '', // y轴返回参数格式\r\n          stickx: '', // 刻度线是否有\r\n          sticky: '',\r\n          xyline_color: '#16C7FB', // xy轴颜色\r\n          font_color: '#fff', // xy轴字体颜色\r\n          legend_color: '#16C7FB', // legend字体颜色\r\n          stack: '1' // 若series 下stack  为空或者null---多柱状图  若相同且不为null---多柱状图\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      colorlist: ['#89A2FF', '#A2BCFF', '#FF9F9C', '#FFDC79'] // 扇形区域以及列表颜色\r\n    }\r\n  },\r\n  watch: {\r\n    getdata: {\r\n      // immediate: true,\r\n      handler(val) {\r\n        this.$nextTick(() => {\r\n          // this.LineClomn(val)\r\n          this.clomnthree(val)\r\n        })\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.chart = echarts.init(document.getElementById(this.getdata.id))\r\n  },\r\n  beforeDestroy() {\r\n    if (!this.chart) {\r\n      return\r\n    }\r\n    this.chart.dispose()\r\n    this.chart = null\r\n  },\r\n  methods: {\r\n    clomnthree(data) {\r\n      var that = this\r\n      var legend = data.legend\r\n      var datax = data.datax\r\n      var color = data.color\r\n      var stack = data.stack\r\n      if (stack === '' || stack === undefined) {\r\n        stack = null\r\n      }\r\n      // series 数组处理\r\n      var series_data = data.series_data\r\n      var series = []\r\n      for (var i = 0; i < series_data.length; i++) {\r\n        series.push({ 'name': legend[i], 'type': 'bar', 'stack': stack, 'data': series_data[i] })\r\n      }\r\n      // 以下为非必传参数\r\n      var row_nums = data.row_nums\r\n      if (row_nums === '' || row_nums === undefined) {\r\n        row_nums = 2\r\n      }\r\n      var x_name = data.x_name\r\n      if (x_name === '' || x_name === undefined) {\r\n        x_name = ''\r\n      }\r\n      var y_name = data.y_name\r\n      if (y_name === '' || y_name === undefined) {\r\n        y_name = ''\r\n      }\r\n      var xyline_color = data.xyline_color // xy轴颜色\r\n      if (xyline_color === '' || x_name === undefined) {\r\n        xyline_color = '#080808'\r\n      }\r\n      var font_color = data.font_color // xy轴字体颜色\r\n      if (font_color === '' || font_color === undefined) {\r\n        font_color = '080808'\r\n      }\r\n      var legend_color = data.legend_color // legend字体颜色\r\n      if (legend_color === '' || legend_color === undefined) {\r\n        legend_color = '080808'\r\n      }\r\n      var stickx = data.stickx // x轴刻度线\r\n      if (stickx === '' || stickx === undefined) {\r\n        stickx = false\r\n      }\r\n      var sticky = data.sticky // y轴刻度线\r\n      if (sticky === '' || sticky === undefined) {\r\n        sticky = false\r\n      }\r\n      var y_fomatter = data.y_fomatter\r\n      if (y_fomatter === '' || y_fomatter === undefined) {\r\n        y_fomatter = '{value}'\r\n      }\r\n      var grid = data.grid\r\n      if (grid === '' || grid === undefined) {\r\n        grid = {\r\n          x: 30,\r\n          y: 40,\r\n          x2: 0,\r\n          y2: 30,\r\n          containLabel: false\r\n        }\r\n      }\r\n      var option = {\r\n        grid: grid,\r\n        tooltip: { // 鼠标移动触发事件\r\n          trigger: 'axis',\r\n          axisPointer: { // 坐标轴指示器，坐标轴触发有效\r\n            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow' | cross\r\n          }\r\n        },\r\n        legend: {\r\n          orient: 'horizontal', // 'vertical'\r\n          x: 'center', // 'center' | 'left' | {number},\r\n          y: 'top', // 'center' | 'bottom' | {number}\r\n          top: 8,\r\n          textStyle: {\r\n            // fontSize: 12, // 字体大小\r\n            color: legend_color // 字体颜色\r\n          },\r\n          data: legend\r\n        },\r\n        color: color,\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            name: x_name,\r\n            triggerEvent: false,\r\n            data: datax,\r\n            axisTick: { // 刻度\r\n              show: stickx\r\n            },\r\n            axisLabel: {\r\n              show: true,\r\n              formatter: function(params) {\r\n                var newParamsName = '' // 最终拼接成的字符串\r\n                var paramsNameNumber = params.length // 实际标签的个数\r\n                var provideNumber = row_nums // 每行能显示的字的个数\r\n                var rowNumber = Math.ceil(paramsNameNumber / provideNumber) // 换行的话，需要显示几行，向上取整\r\n                /**\r\n                * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签\r\n                */\r\n                // 条件等同于rowNumber>1\r\n                if (paramsNameNumber > provideNumber) {\r\n                  /** 循环每一行,p表示行 */\r\n                  for (var p = 0; p < rowNumber; p++) {\r\n                    var tempStr = '' // 表示每一次截取的字符串\r\n                    var start = p * provideNumber // 开始截取的位置\r\n                    var end = start + provideNumber // 结束截取的位置\r\n                    // 此处特殊处理最后一行的索引值\r\n                    if (p === rowNumber - 1) {\r\n                      // 最后一次不换行\r\n                      tempStr = params.substring(start, paramsNameNumber)\r\n                    } else {\r\n                      // 每一次拼接字符串并换行\r\n                      tempStr = params.substring(start, end) + '\\n'\r\n                    }\r\n                    newParamsName += tempStr // 最终拼成的字符串\r\n                  }\r\n                } else {\r\n                  // 将旧标签的值赋给新标签\r\n                  newParamsName = params\r\n                }\r\n                // 将最终的字符串返回\r\n                return newParamsName\r\n              },\r\n              textStyle: {\r\n                color: '#fff'\r\n              }\r\n            },\r\n            axisLine: { // 轴线style\r\n              lineStyle: {\r\n                color: xyline_color\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value',\r\n            name: y_name,\r\n            axisTick: { // 刻度\r\n              show: sticky\r\n            },\r\n            splitLine: { // 网格线\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              formatter: y_fomatter,\r\n              textStyle: {\r\n                color: font_color\r\n              }\r\n            },\r\n            axisLine: { // 轴线style\r\n              lineStyle: {\r\n                color: xyline_color\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        series: series\r\n      }\r\n      that.chart.setOption(option)\r\n      window.addEventListener('resize', function() {\r\n        that.chart.resize()\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}