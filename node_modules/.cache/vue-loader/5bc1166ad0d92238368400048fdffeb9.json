{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\login\\retrieve.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\login\\retrieve.vue","mtime":1577252313358},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Logo from './components/Logo'\nimport { validUsername, validMobile } from '@/utils/validate'\nimport SIdentify from '@/components/SIdentify'\nimport { checkUsername, checkMobile, checkMobileCode, updatePW } from '@/api/user'\n\nexport default {\n  name: 'Retrieve',\n  components: { Logo, SIdentify },\n  data() {\n    const validateUsername = (rule, value, callback) => {\n      if (!validUsername(value)) {\n        callback(new Error('请输入用户名'))\n      } else {\n        callback()\n      }\n    }\n    const validateCode = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入验证码'))\n      } else if (value !== this.identifyCode) {\n        callback(new Error('验证码不正确!'))\n      } else {\n        callback()\n      }\n    }\n    const validateMobile = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入手机号码'))\n      } else if (!validMobile(value)) {\n        callback(new Error('手机号输入不正确!'))\n      } else {\n        callback()\n      }\n    }\n    const validateMobileCode = (rule, value, callback) => {\n      console.log(value)\n      console.log(this.mobileCode)\n      if (value === '') {\n        callback(new Error('请输入短信验证码'))\n      } else if (value !== this.mobileCode && this.mobileCode !== '') {\n        callback(new Error('短信验证码不正确!'))\n      } else {\n        callback()\n      }\n    }\n    const validatePassword1 = (rule, value, callback) => {\n      if (value.length < 6) {\n        callback(new Error('密码不能少于6位'))\n      } else {\n        callback()\n      }\n    }\n    const validatePassword2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'))\n      } else if (value !== this.retrieveForm.password1) {\n        callback(new Error('两次密码输入不一致!'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      retrieveForm: {\n        username: '',\n        code: '',\n        mobile: '',\n        mobilecode: '',\n        password1: '',\n        password2: ''\n      },\n      retrieveRules: {\n        username: [{ required: true, trigger: 'blur', validator: validateUsername }],\n        code: [{ required: true, trigger: 'blur', validator: validateCode }],\n        mobile: [{ required: true, trigger: 'blur', validator: validateMobile }],\n        mobilecode: [{ required: true, trigger: 'blur', validator: validateMobileCode }],\n        password1: [{ required: true, trigger: 'blur', validator: validatePassword1 }],\n        password2: [{ required: true, trigger: 'blur', validator: validatePassword2 }]\n      },\n      active: 0,\n      userInput: false,\n      codeInput: false,\n      mobileInput: false,\n      mobileCodeInput: false,\n      pass1Input: false,\n      pass2Input: false,\n      contentHeight: 100,\n      identifyCodes: '1234567890',\n      identifyCode: '',\n      mobileText: '获取短信',\n      mobileCode: '',\n      sendStatus: false,\n      leaveTime: 5\n    }\n  },\n  mounted() {\n    this.identifyCode = ''\n    this.makeCode(this.identifyCodes, 4)\n  },\n  methods: {\n    focusinput(type) {\n      switch (type) {\n        case 1:\n          this.userInput = true\n          break\n        case 2:\n          this.codeInput = true\n          break\n        case 3:\n          this.mobileInput = true\n          break\n        case 4:\n          this.mobileCodeInput = true\n          break\n        case 5:\n          this.pass1Input = true\n          break\n        case 6:\n          this.pass2Input = true\n          break\n        default:\n          break\n      }\n    },\n    blurinput(type) {\n      switch (type) {\n        case 1:\n          this.userInput = false\n          break\n        case 2:\n          this.codeInput = false\n          break\n        case 3:\n          this.mobileInput = false\n          break\n        case 4:\n          this.mobileCodeInput = false\n          break\n        case 5:\n          this.pass1Input = false\n          break\n        case 6:\n          this.pass2Input = false\n          break\n        default:\n          break\n      }\n    },\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min)\n    },\n    // 切换验证码\n    refreshCode() {\n      this.identifyCode = ''\n      this.makeCode(this.identifyCodes, 4)\n    },\n    // 生成四位随机验证码\n    makeCode(o, l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode += this.identifyCodes[\n          this.randomNum(0, this.identifyCodes.length)\n        ]\n      }\n    },\n    getMobileCode() { // 获取短信验证码\n      this.$refs.retrieveForm.validateField('mobile', (error) => {\n        if (!error && !this.sendStatus) {\n          return new Promise((resolve, reject) => {\n            checkMobile({ phone: this.retrieveForm.mobile, username: this.retrieveForm.username, num: '' }).then(response => {\n              if (response.msg === 'SUCCESS') {\n                this.$message({\n                  message: '短信获取成功',\n                  type: 'success',\n                  duration: 3000\n                })\n                this.mobileCode = this.retrieveForm.mobilecode = response.data.validateNum\n                var sendtime = 90\n                this.mobileText = sendtime + 's'\n                this.sendStatus = true\n                var timer = setInterval(() => {\n                  if (sendtime <= 0) {\n                    this.mobileText = '获取短信'\n                    this.sendStatus = false\n                    clearInterval(timer)\n                  } else {\n                    sendtime--\n                    this.mobileText = sendtime + 's'\n                  }\n                }, 1000)\n              } else {\n                this.$message({\n                  message: response.msg,\n                  type: 'warning',\n                  duration: 3000\n                })\n              }\n              resolve()\n            }).catch(error => {\n              reject(error)\n            })\n          }).then(res => {})\n        }\n      })\n    },\n    handleNext() {\n      if (this.active === 0) {\n        this.$refs.retrieveForm.validateField('username', (error) => {\n          if (!error) {\n            this.$refs.retrieveForm.validateField('code', (codeError) => {\n              if (!codeError) {\n                return new Promise((resolve, reject) => {\n                  checkUsername({ phone: this.retrieveForm.username, username: '' }).then(response => {\n                    if (response.msg === 'SUCCESS') {\n                      this.active = 1\n                    } else {\n                      this.$message({\n                        message: response.msg,\n                        type: 'warning',\n                        duration: 3000\n                      })\n                    }\n                    resolve()\n                  }).catch(error => {\n                    reject(error)\n                  })\n                }).then(res => {})\n              }\n            })\n          }\n        })\n      } else if (this.active === 1) {\n        this.$refs.retrieveForm.validateField('mobile', (error) => {\n          if (!error) {\n            this.$refs.retrieveForm.validateField('mobilecode', (codeError) => {\n              if (!codeError) {\n                return new Promise((resolve, reject) => {\n                  checkMobileCode({ phone: this.retrieveForm.mobile, username: '', num: this.retrieveForm.mobilecode }).then(response => {\n                    if (response.msg === 'SUCCESS') {\n                      this.active = 2\n                    } else {\n                      this.$message({\n                        message: response.msg,\n                        type: 'warning',\n                        duration: 3000\n                      })\n                    }\n                    resolve()\n                  }).catch(error => {\n                    reject(error)\n                  })\n                }).then(res => {})\n              }\n            })\n          }\n        })\n      } else if (this.active === 2) {\n        this.$refs.retrieveForm.validateField('password1', (error) => {\n          if (!error) {\n            this.$refs.retrieveForm.validateField('password2', (codeError) => {\n              if (!codeError) {\n                return new Promise((resolve, reject) => {\n                  updatePW({ newpassword: this.retrieveForm.password1, username: this.retrieveForm.username }).then(response => {\n                    if (response.msg === 'SUCCESS') {\n                      this.active = 3\n                      var leaveTimer = setInterval(() => {\n                        if (this.leaveTime <= 0) {\n                          clearInterval(leaveTimer)\n                          this.leaveTime = 5\n                          this.$router.push({ path: '/login' })\n                        } else {\n                          this.leaveTime--\n                        }\n                      }, 1000)\n                    } else {\n                      this.$message({\n                        message: response.msg,\n                        type: 'warning',\n                        duration: 3000\n                      })\n                    }\n                    resolve()\n                  }).catch(error => {\n                    reject(error)\n                  })\n                }).then(res => {})\n              }\n            })\n          }\n        })\n      }\n    }\n  }\n}\n",null]}