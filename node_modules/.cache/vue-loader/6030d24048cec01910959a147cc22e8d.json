{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\ChartDoubleClomn.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\views\\yingzhi\\components\\ChartDoubleClomn.vue","mtime":1576638136682},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport echarts from 'echarts'\r\n// import resize from './mixins/resize'\r\nexport default {\r\n  // mixins: [resize],\r\n  props: {\r\n    className: {\r\n      type: String,\r\n      default: 'chart'\r\n    },\r\n    getdata: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          id: 'echar',\r\n          height: '100%',\r\n          width: '100%',\r\n          legend: [],\r\n          datay1: [],\r\n          datay2: [],\r\n          datax: []\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      colorlist: ['#89A2FF', '#A2BCFF', '#FF9F9C', '#FFDC79'] // 扇形区域以及列表颜色\r\n    }\r\n  },\r\n  watch: {\r\n    getdata: {\r\n      // immediate: true,\r\n      handler(val) {\r\n        this.$nextTick(() => {\r\n          // this.LineClomn(val)\r\n          this.LineClomn(val)\r\n        })\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.chart = echarts.init(document.getElementById(this.getdata.id))\r\n  },\r\n  beforeDestroy() {\r\n    if (!this.chart) {\r\n      return\r\n    }\r\n    this.chart.dispose()\r\n    this.chart = null\r\n  },\r\n  methods: {\r\n    LineClomn() {\r\n      var that = this\r\n      var legend = ['离线', '在线']\r\n      var datax = ['视频监控', '网络', '水质监控', '大屏', '服务器']\r\n      var datay2 = [23.2, 25.6, 76.7, 135.6, 33]\r\n      var datay1 = [26.4, 70.7, 175.6, 28.2, 55]\r\n      var option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: { // 坐标轴指示器，坐标轴触发有效\r\n            type: 'cross' // 默认为直线，可选为：'line' | 'shadow' | cross\r\n          }\r\n        },\r\n        legend: {\r\n          top: 20,\r\n          textStyle: {\r\n            // fontSize: 18,// 字体大小\r\n            color: '#16C7FB' // 字体颜色\r\n          },\r\n          data: legend\r\n        },\r\n        color: ['#F94B2F', '#02F9AB'],\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisTick: { // 刻度\r\n            show: false\r\n          },\r\n          splitLine: { // 网格线\r\n            show: false\r\n          },\r\n          axisLine: { // 轴线style\r\n            lineStyle: {\r\n              color: '#16C7FB'\r\n            }\r\n          },\r\n          axisLabel: {\r\n            formatter: '{value}',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          nameTextStyle: { // 轴名称样式\r\n            color: '#16C7FB'\r\n          },\r\n          axisLine: { // 轴线style\r\n            lineStyle: {\r\n              color: '#16C7FB'\r\n            }\r\n          },\r\n          axisTick: { // 刻度\r\n            show: false\r\n          },\r\n          axisLabel: {\r\n            show: true,\r\n            formatter: function(params) {\r\n              var newParamsName = '' // 最终拼接成的字符串\r\n              var paramsNameNumber = params.length // 实际标签的个数\r\n              var provideNumber = 1 // 每行能显示的字的个数\r\n              var rowNumber = Math.ceil(paramsNameNumber / provideNumber) // 换行的话，需要显示几行，向上取整\r\n              /**\r\n              * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签\r\n              */\r\n              // 条件等同于rowNumber>1\r\n              if (paramsNameNumber > provideNumber) {\r\n                /** 循环每一行,p表示行 */\r\n                for (var p = 0; p < rowNumber; p++) {\r\n                  var tempStr = '' // 表示每一次截取的字符串\r\n                  var start = p * provideNumber // 开始截取的位置\r\n                  var end = start + provideNumber // 结束截取的位置\r\n                  // 此处特殊处理最后一行的索引值\r\n                  if (p === rowNumber - 1) {\r\n                    // 最后一次不换行\r\n                    tempStr = params.substring(start, paramsNameNumber)\r\n                  } else {\r\n                    // 每一次拼接字符串并换行\r\n                    tempStr = params.substring(start, end) + '\\n'\r\n                  }\r\n                  newParamsName += tempStr // 最终拼成的字符串\r\n                }\r\n              } else {\r\n                // 将旧标签的值赋给新标签\r\n                newParamsName = params\r\n              }\r\n              // 将最终的字符串返回\r\n              return newParamsName\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // axisLabel: {\r\n          //   interval: 0,\r\n          //   rotate: 40\r\n          // },\r\n          data: datax\r\n        },\r\n        series: [\r\n          {\r\n            name: '离线',\r\n            barWidth: 20, // 柱图宽度\r\n            type: 'bar',\r\n            stack: '总量',\r\n            data: datay1\r\n          },\r\n          {\r\n            name: '在线',\r\n            type: 'bar',\r\n            barWidth: 20, // 柱图宽度\r\n            stack: '总量',\r\n            data: datay2\r\n          }\r\n        ]\r\n      }\r\n      that.chart.setOption(option)\r\n      window.addEventListener('resize', function() {\r\n        that.chart.resize()\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}