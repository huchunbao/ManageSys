{"remainingRequest":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\办公\\projectwc\\前端\\ManageSys\\src\\components\\Cropper\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\src\\components\\Cropper\\index.vue","mtime":1576638136259},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\办公\\projectwc\\前端\\ManageSys\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Cropper from 'cropperjs'\nexport default {\n  props: {\n    id: {\n      type: String,\n      default: ''\n    },\n    uid: {\n      type: Number,\n      default: 0\n    },\n    defaultUrl: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      cropper: null,\n      url: this.defaultUrl,\n      imgCropperData: {\n        accept: 'image/jpeg, image/png, image/jpg'\n      }\n    }\n  },\n  created() {},\n  mounted() {\n    this.$nextTick(function() {\n      this.init()\n    })\n  },\n  methods: {\n    init: function() {\n      this.cropper = new Cropper(this.$refs.cropperImage, {\n        aspectRatio: 1,\n        viewMode: 1,\n        zoomOnWheel: false, // 是否允许通过鼠标滚轮来缩放图片\n        background: true, // 是否在容器上显示网格背景\n        rotatable: true, // 是否允许旋转图片\n        ready: function() {\n\n        }\n      })\n      this.cropper.replace(this.defaultUrl)\n    },\n    getObjectURL: function(file) {\n      var url = null\n      if (window.createObjectURL !== undefined) { // basic\n        url = window.createObjectURL(file)\n      } else if (window.URL !== undefined) { // mozilla(firefox)\n        url = window.URL.createObjectURL(file)\n      } else if (window.webkitURL !== undefined) { // webkit or chrome\n        url = window.webkitURL.createObjectURL(file)\n      }\n      return url\n    },\n    change: function(e) {\n      const files = e.target.files || e.dataTransfer.files\n      if (!files.length) return\n      const type = files[0].type // 文件的类型，判断是否是图片\n      const size = files[0].size // 文件的大小，判断图片的大小\n      if (this.imgCropperData.accept.indexOf(type) === -1) {\n        this.$message({\n          message: '请选择jpg、jpeg、png格式图片文件',\n          type: 'warning'\n        })\n        return false\n      }\n      if (size > 2097152) {\n        this.$message({\n          message: '请选择2M以下图片文件',\n          type: 'warning'\n        })\n        return false\n      }\n      this.url = this.getObjectURL(files[0])\n      // 每次替换图片要重新得到新的url\n      if (this.cropper) {\n        this.cropper.replace(this.url)\n      }\n      // $('#change').val('')\n    },\n    getRoundedCanvas(sourceCanvas) {\n      var canvas = document.createElement('canvas')\n      var context = canvas.getContext('2d')\n      var width = sourceCanvas.width\n      var height = sourceCanvas.height\n      canvas.width = width\n      canvas.height = height\n      context.imageSmoothingEnabled = true\n      context.drawImage(sourceCanvas, 0, 0, width, height)\n      context.globalCompositeOperation = 'destination-in'\n      context.beginPath()\n      context.arc(\n        width / 2,\n        height / 2,\n        Math.min(width, height) / 2,\n        0,\n        2 * Math.PI,\n        true\n      )\n      context.fill()\n      return canvas\n    },\n    // 裁剪提交\n    submit: function() {\n      // var croppedCanvas = null\n      var roundedCanvas = null\n      // Crop\n      roundedCanvas = this.cropper.getCroppedCanvas()\n      if (roundedCanvas === null) {\n        return\n      }\n      // Round\n      // roundedCanvas = this.getRoundedCanvas(croppedCanvas) // 绘制成圆型\n      // 上传图片\n      var formData = new FormData()\n      const file = this.dataURLtoFile(roundedCanvas.toDataURL(), '')\n      this.url = this.getObjectURL(file)\n      if (this.cropper) {\n        this.cropper.replace(this.url)\n      }\n      formData.append('file', file)\n      this.$store.dispatch('user/updateAvatar', { uid: this.uid, formData: formData })\n        .then(() => {\n          this.$message({\n            message: '头像修改成功',\n            type: 'success',\n            duration: 2000\n          })\n        })\n        .catch((e) => {\n          this.$message({\n            message: '修改失败，请稍后重试',\n            type: 'warning',\n            duration: 2000\n          })\n        })\n    },\n    dataURLtoFile: function(dataurl, filename) { // 将base64转换为文件\n      var arr = dataurl.split(',')\n      var mime = arr[0].match(/:(.*?);/)[1]\n      var bstr = atob(arr[1])\n      var n = bstr.length\n      var u8arr = new Uint8Array(n)\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      return new File([u8arr], filename, {\n        type: mime\n      })\n    }\n  }\n}\n",null]}